/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool comp(Interval lhs, Interval rhs) { return lhs.start < rhs.start; } 
vector<Interval> Solution::merge(vector<Interval> &a) {
 
        //n size of array
        int n=a.size(),i,flag=0;
        //just soted the intervals
        sort(a.begin(),a.end(),comp);
        // here in s we save the final non overalaping intervals 
         vector <Interval> s;
         s.push_back(a[0]);
//       we have pushed the top most interval in the s;
         int c=1;
//        count = 1 because 1 elemet has been pushed
         for(i=1;i<n;i++)
         {
             Interval top =s[c-1];
            // taken top element on the hand;
            // cout<<top.end<<" "<<a[i].start<<endl;
            //if overlaps occur
            //checked that top.end>=a[i].start if yes just change the end point
            //s[c-1].end = a[i].end;
             if(top.end>=a[i].start)
             {
              //if overlaps occur   
             //    cout<<"up= "<<endl;
                 if(top.end < a[i].end)
                     s[c-1].end = a[i].end;  
            }
            else
            {
            //    cout<<"down= "<<endl;
            // if no overlap just put the interval at the end
                s.push_back(a[i]);
                c++;
            }
         }

        return s;
}
