class MyCircularQueue {
public:
    int e[1000001]={0}; 
    int start = 0;
    int endss = -1;
    int size;
    int c=0;
    /** Initialize your data structure here. Set the size of the queue to be k. */
    MyCircularQueue(int k) {
        size=k;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    bool enQueue(int x) {
        if(isFull())
        {
//            cout<<"full"<<endl;
            return false;
        }
        else
        {
//            cout<<"enq"<<endl;
            c++;
            endss = (endss+1) % size;
            e[endss]=x;
            
            // cout<<"se= "<<start<<" "<<endss<<endl;
            // for(int i=0;i<size;i++)
            //     cout<<e[i]<<" ";
            // cout<<endl;
            
            return true;
        }
        
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    bool deQueue() {
        if(isEmpty())
		    return false;
        else
        {
            start = start % size;
            c--;
//            cout<<e[start]<<endl;
            e[start]=0;
            ++start;
            return true;
        }
        
    }
    
    /** Get the front item from the queue. */
    int Front() {
        cout<<"front"<<endl;
        if(isEmpty())
		    return -1;
        else
        {
 //           cout<<e[start]<<endl;
            return e[start];
        }    
    }
    
    /** Get the last item from the queue. */
    int Rear() {
//        cout<<"rear"<<endl;
        if(isEmpty())
        {
//            cout<<"empty"<<endl;
            return -1;
        } 
        else
        {
//            cout<<e[endss]<<endl;
            return e[endss];
        }
    }
    
    /** Checks whether the circular queue is empty or not. */
bool isEmpty() {
    if(c==0)
	    return true;
    else 
        return false;
}

/** Checks whether the circular queue is full or not. */
bool isFull() {
    if(c==size)
        return true;
    else
        return false;
}
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
