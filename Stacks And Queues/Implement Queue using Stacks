class MyQueue {
    stack <int> a;
    stack <int> b;
    stack <int> c;
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        a.push(x);	        
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int tem;
        if(!b.empty())
        {
            tem=b.top();
            b.pop();
            return tem;
        }
        else if(empty())
        {
            return 0;
        }
        else
        {
            while(!a.empty())
            {
                b.push(a.top());
                a.pop();
            }
            tem =  b.top();
            b.pop();
            return tem;
        } 
    }
    
    /** Get the front element. */
    int peek() {
        int tem;
        if(!b.empty())
        {
            tem=b.top();
            return tem;
        }
        else if(empty())
        {
            return 0;
        }
        else
        {
            while(!a.empty())
            {
                b.push(a.top());
                a.pop();
            }
            tem =  b.top();
            return tem;
        }
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        if(b.empty()&&a.empty())
            return 1;
        else
            return 0;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
