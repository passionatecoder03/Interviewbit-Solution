int bs(vector<int> a , int s, int e ,int k)
{
    while(s<=e)
    {
        int mid = s+(e-s) / 2;
        if(a[mid] > k)
        {
            e = mid-1;
        }
        else if(a[mid] < k)
        {
            s = mid + 1; 
        }
        else
        {
            return 1;
        }
    }
    if(s>e) return 0;
}
 
int Solution::diffPossible(vector<int> &a, int k) {
 
        int n=a.size(),i,ans=0,flag=0;
        if(n==1) return 0;
        if(n>1&&k==0)
        {
            for(i=0;i<n-1;i++)
            {
                if(a[i]==a[i+1])
                {
                    flag=1;
                    return 1;
                }
            }
            if(flag==0)
                return 0;
            
        }
        for(i=0;i<n;i++)
        {
            int find = k+a[i];
           
            ans = bs(a,0,n-1,find);
            // cout<<find<<" "<<ans<<endl;
            if(ans==1)
                break;
        }    
 
        //cout<<ans<<endl;
    return ans;
}
