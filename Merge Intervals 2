/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
bool comp(Interval lhs, Interval rhs) { return lhs.start < rhs.start; } 
vector<Interval> Solution::insert(vector<Interval> &a, Interval b) {
        //n size of array
        int n=a.size(),i,j,k;
        // we taken the b(new interval) and mixed it with all the intervals
        a.push_back(b);
        //sorted all the interval with the b(new interval)
        sort(a.begin(),a.end(),comp);
        //increses the size by +1;
        n++;
        // made an vector to save the lemets
         vector < Interval> s;
         //push the 1st elemet
         s.push_back(a[0]);
         int c=1;
         //cont =1; becuse 1 elemet is in vector ie top;
         for(i=1;i<n;i++)
         {
             
              Interval top =s[c-1];
              // taken top element on the hand;
              
            // cout<<top.end<<" "<<a[i].start<<endl;
            //if overlaps occur
            //checked that top.end>=a[i].start if yes just change the end point
            //s[c-1].end = a[i].end;
             if(top.end>=a[i].start)
             {
                 //if overlaps occur
         //        cout<<"up= "<<endl;
                 if(top.end < a[i].end)
                     s[c-1].end = a[i].end;
            }
            else
            {
                // if no overlap just put the interval at the end
            //    cout<<"down= "<<endl;
                s.push_back(a[i]);
                c++;
            }
         }
 
    
    return s;
}
